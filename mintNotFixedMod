#include <cstdint>
#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <chrono>
#include <cassert>
using namespace std;

class  RNG   // RANDOM NUMBER GENERATOR
{
  private:
    mt19937_64  mt;

  public:
    RNG() : mt( chrono::steady_clock::now().time_since_epoch().count() ) {}

    int64_t operator () ( int64_t L, int64_t R )  {
        uniform_int_distribution<int64_t>  dist( L, R - 1 );
        return  dist( mt );
    }

    int64_t operator () ( int64_t r )  { return (*this)( 0, r ); }
}  rng;

class  Mint  // MODULAR INTEGERS IN MONTGOMERY FORM
{
  private:
    using  u64  = uint64_t;
    using  u128 = __uint128_t;

    // CLASS MEMBER DATA
    static u64  mod;
    static u64  N;      //  mod * N â‰¡ -1 MOD 2^64
    static u64  R;      //  2^128 MOD mod
    u64         a;

  public:
    Mint() = default;
    Mint( int64_t  b ) : a( reduce( u128( b ) * R ) )  {};

    // GETS AND SETS
    static u64  get_mod()  { return  mod; }
    u64  get() const  {
        u64  ret = reduce( a );
        return  ret >= mod ? ret - mod : ret;
    }
    static void  set_mod( u64 m )  {
        N = mod = m;
        for( int i=0 ; i<5 ; ++i )   N *= 2 - m * N;
        N = -N;
        R = -u128( m ) % m;
    }

    // OPERATORS
    Mint &operator += ( const Mint &b )  {
        if( int64_t( a += b.a - 2 * mod ) < 0 )   a += 2 * mod;
        return  *this;
    }
    Mint &operator -= ( const Mint &b )  {
        if( int64_t( a -= b.a ) < 0 )   a += 2 * mod;
        return  *this;
    }
    Mint &operator *= ( const Mint &b )  {
        a = reduce( u128( a ) * b.a );
        return  *this;
    }

    Mint operator  + (const Mint &b) const { return Mint(*this) += b; }
    Mint operator  - (const Mint &b) const { return Mint(*this) -= b; }
    Mint operator  * (const Mint &b) const { return Mint(*this) *= b; }
    Mint operator    - () const {  return  Mint() - Mint(*this); }
    Mint& operator  ++ ()  { return  *this += Mint( 1 ); }
    Mint& operator  -- ()  { return  *this -= Mint( 1 ); }

    bool operator == ( const Mint &b ) const  {
        return ( a >= mod ? a - mod : a ) == ( b.a >= mod ? b.a - mod : b.a );
    }
    bool operator != ( const Mint &b ) const  {
        return ( a >= mod ? a - mod : a ) != ( b.a >= mod ? b.a - mod : b.a );
    }

    // METHODS
    Mint  pow( u64  n ) const  {
        Mint  ret( 1 ),  mul( *this );
        while( n > 0 )  { if( n & 1 )  ret *= mul;   mul *= mul;  n >>= 1; }
        return  ret;
    }

    friend ostream &operator << ( ostream &os, const Mint &b )  {
        return  os << b.get();
    }
    friend istream &operator >> ( istream &is, Mint &b )  {
        int64_t  t;  is >> t;
        b = Mint( t );
        return  is;
    }

  private:
    static u64 reduce( const u128 &b )  {
        return ( b + u128( u64( b ) * u64( N ) ) * mod ) >> 64;
    }
};

// NONCONSTANT STATIC CLASS MEMBERS MUST HAVE GLOBAL SCOPE
typename  Mint::u64   Mint::mod,  Mint::N,  Mint::R;

// ===================  BEGIN MILLER RABIN  ===================
static inline bool  isPrime( const uint64_t n )
{
    static constexpr uint64_t  primeMask = 2891462833508853932ULL;
    if( n < 64 )  { return  primeMask >> n & 1; }  // BITMASK SMALL PRIMES
    if( !( n & 1 ) )   return  false;

    Mint::set_mod( n );

    uint64_t  u = n - 1;
    int  s,  t = 0;
    while( !( u & 1 ) )  ++t,  u >>= 1;

    // FROM  http://miller-rabin.appspot.com/    SEE REMARKS
    vector<uint64_t>  seeds;
    if( n < 1050535501ULL )               seeds = { 336781006125ULL, 9639812373923155ULL };
    else if( n < 350269456337ULL )        seeds = { 4230279247111683200ULL, 14694767155120705706ULL,
                              16641139526367750375ULL };
    else if( n < 55245642489451ULL )      seeds = { 2ULL, 141889084524735ULL, 1199124725622454117ULL,
                              11096072698276303650ULL };
    else if( n < 7999252175582851ULL )    seeds = { 2ULL, 4130806001517ULL, 149795463772692060ULL,
                              186635894390467037ULL, 3967304179347715805ULL };
    else if( n < 585226005592931977ULL )  seeds = { 2ULL, 123635709730000ULL, 9233062284813009ULL,
                              43835965440333360ULL, 761179012939631437ULL, 1263739024124850375ULL };
    else  seeds = { 2ULL, 325ULL, 9375ULL, 28178ULL, 450775ULL, 9780504ULL, 1795265022ULL };

    for( auto &a : seeds )  {
        uint64_t  p = a < n ? a : a % n;
        if( p == 0 )   continue;

        Mint  x = Mint( p ).pow( u );

        if( x != 1 )  {
            for( s=0 ; s<t && x!=n-1 ; ++s )
                if( (x *= x) == 1 )   return  false;
            if( t == s )   return  false;
        }
    }
    return  true;
}
// ====================  END MILLER RABIN  ====================

using  u32 = uint32_t;
using  u64 = uint64_t;

// ===================  BEGIN POLLARD'S RHO  ===================
u64  pollardRho( u64 n )  {
    if( !( n & 1 ) )    return  2;
    if( isPrime( n ) )  return  n;

    Mint::set_mod( n );

    Mint  R,  one = 1;
    auto  f   = [&]( Mint x ) { return x * x + R; };
    auto  rnd = [&]()  { return rng( n - 2 ) + 2; };
    constexpr size_t  m = 128;

    while( true )  {
        Mint  x,  ys,  q = one,  y = rnd();
        R = rnd();
        u64  g = 1;

        for( u64 r=1 ; g==1 ; r<<=1ULL )  {
            x = y;
            for( size_t i=0 ; i<r ; ++i )  y = f( y );
            for( size_t k=0 ; g==1 && k<r ; k += m )  {
                ys = y;
                for( size_t i=0 ; i<m && i<r-k ; ++i )  q *= x - ( y = f ( y ) );
                g = gcd( q.get(), n );
            }
        }

        if( g == n )
            do  { g = gcd( ( x - ( ys = f(ys) ) ).get(), n ); }  while( g == 1 );

        if( g != n )  return g;
    }
    return 0;
}
// ====================  END POLLARD'S RHO  ====================

vector<u64>  findFactors( u64 n )  {
    if( n <= 1 )  return {};

    u64  p = pollardRho( n );
    if( p == n )  return { n };

    auto  l = findFactors( p );
    auto  r = findFactors( n / p );

    copy( begin( r ), end( r ), back_inserter( l ) );
    return  l;
}

vector< pair<u64, u32> >  primeFactorization( u64 n )  {
    auto  pf = findFactors( n );
    sort( begin( pf ), end( pf ) );

    vector< pair<u64, u32> >  ret;
    for( auto &e : pf )  {
        if( !empty( ret ) && ret.back().first == e )  ++ret.back().second;
        else   ret.emplace_back( e, 1 );
    }
    return  ret;
}

using  i64 = int64_t;

i64  primitiveRoot( i64 n )  {
    if( n == 2 )  return  1;
    if( n == 3 )  return  2;
    auto  pf = primeFactorization( n - 1 );
    Mint::set_mod( n );
    while( true )  {
        bool  ok = true;
        Mint  g = rng( 1, n );
        for( auto [p, _] : pf )
            if( g.pow( ( n - 1 ) / p ) == 1 )  {
                ok = false;
                break;
            }
        if( ok )  return  g.get();
    }
}


int main()
{
    cin.tie( 0 );
    cin.sync_with_stdio( 0 );

    int  q;
    cin >> q;
    while( q-- )  {
        i64  p;
        cin >> p;
        cout << primitiveRoot( p ) << '\n';
    }
    return  0;
}
